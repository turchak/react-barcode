{"version":3,"sources":["serviceWorker.js","components/Scanner/index.js","components/Result/index.js","containers/ScannerContainer.js","index.js"],"names":["Boolean","window","location","hostname","match","Scanner","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","detected","result","getCode","Quagga","stop","videoRef","React","createRef","_this2","navigator","mediaDevices","getUserMedia","video","then","stream","alert","init","inputStream","name","type","width","min","height","aspectRatio","max","target","current","decoder","readers","locator","patchSize","halfSample","numOfWorkers","frequency","locate","err","console","log","start","onDetected","onProcessed","drawingCtx","canvas","ctx","overlay","drawingCanvas","dom","boxes","clearRect","parseInt","getAttribute","filter","box","forEach","ImageDebug","drawPath","x","y","color","lineWidth","codeResult","code","line","catch","concat","offDetected","react_default","a","createElement","id","ref","Component","Result","ScannerContainer","handleClick","ev","isScanning","state","setState","_this$state","react","onClick","components_Result","components_Scanner","ReactDOM","render","containers_ScannerContainer","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.647405d7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\nimport Quagga from 'quagga';\r\n\r\nclass Scanner extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.videoRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        navigator.mediaDevices.getUserMedia({\r\n            video: true\r\n        }).then((stream) => {\r\n            alert('ready')\r\n            Quagga.init({\r\n                inputStream : {\r\n                  name : \"Live\",\r\n                  type : \"LiveStream\",\r\n                  width: {min: 640},\r\n                  height: {min: 480},\r\n                  aspectRatio: {min: 1, max: 2},\r\n                  target:this.videoRef.current\r\n                },\r\n                decoder : {\r\n                  readers : [\"ean_8_reader\"]\r\n                },\r\n                locator: {\r\n                    patchSize: \"medium\",\r\n                    halfSample: true\r\n                },\r\n                numOfWorkers: 2,\r\n                frequency: 10,\r\n                locate: true\r\n              }, err => {\r\n                  if (err) {\r\n                      console.log(err);\r\n                      return\r\n                  }\r\n                  console.log(\"Initialization finished. Ready to start\");\r\n                  Quagga.start();\r\n              });\r\n\r\n              Quagga.onDetected(result => this.detected(result))\r\n                  Quagga.onProcessed(result => {\r\n                    const drawingCtx = Quagga.canvas.ctx.overlay,\r\n                        drawingCanvas = Quagga.canvas.dom.overlay;\r\n            \r\n                    if (result) {\r\n                        if (result.boxes) {\r\n                            drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute(\"width\")), parseInt(drawingCanvas.getAttribute(\"height\")));\r\n                            result.boxes.filter(function (box) {\r\n                                return box !== result.box;\r\n                            }).forEach(function (box) {\r\n                                Quagga.ImageDebug.drawPath(box, {x: 0, y: 1}, drawingCtx, {color: \"green\", lineWidth: 2});\r\n                            });\r\n                        }\r\n            \r\n                        if (result.box) {\r\n                            Quagga.ImageDebug.drawPath(result.box, {x: 0, y: 1}, drawingCtx, {color: \"#00F\", lineWidth: 2});\r\n                        }\r\n            \r\n                        if (result.codeResult && result.codeResult.code) {\r\n                            Quagga.ImageDebug.drawPath(result.line, {x: 'x', y: 'y'}, drawingCtx, {color: 'red', lineWidth: 3});\r\n                        }\r\n                    }\r\n                });\r\n        }).catch(err => {\r\n            alert(`here error ${err}`)\r\n        })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        Quagga.offDetected(this.detected);\r\n    }\r\n\r\n    detected = result => {\r\n        const { getCode } = this.props;\r\n        getCode(result);\r\n        Quagga.stop()\r\n    }\r\n\r\n    render() {\r\n        return <div id=\"scanner\" ref={this.videoRef} />\r\n    }\r\n}\r\n\r\nexport default Scanner;","import React, { Component } from 'react';\r\n\r\nclass Result extends Component {\r\n    render() {\r\n        const { code } = this.props;\r\n        return <div>{code}</div>\r\n    }\r\n}\r\n\r\nexport default Result;","import React, { Component, Fragment } from 'react';\r\nimport Scanner from '../components/Scanner';\r\nimport Result from '../components/Result';\r\n\r\nclass ScannerContainer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isScanning: false,\r\n            code: null,\r\n        };\r\n    }\r\n\r\n    handleClick = ev => {\r\n        const { isScanning } = this.state;\r\n        this.setState({\r\n            isScanning: !isScanning\r\n        })\r\n    }\r\n\r\n    getCode = result => {\r\n        console.log(result.codeResult.code)\r\n        this.setState({\r\n            code: result.codeResult.code,\r\n            isScanning: false,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const  { isScanning, code } = this.state;\r\n        return (\r\n            <Fragment>\r\n                <button type=\"button\" onClick={this.handleClick}>{ isScanning ? 'Stop' : 'Scan' }</button>\r\n                { code ? <Result code={code} /> : null }\r\n                { isScanning ? <Scanner getCode={this.getCode} /> : null }\r\n            </Fragment>    \r\n        )\r\n    }\r\n}\r\n\r\nexport default ScannerContainer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport ScannerContainer from './containers/ScannerContainer';\nimport './index.css';\n\nReactDOM.render(<ScannerContainer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}