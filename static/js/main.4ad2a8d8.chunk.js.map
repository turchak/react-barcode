{"version":3,"sources":["serviceWorker.js","components/Scanner/index.js","components/Result/index.js","containers/ScannerContainer.js","index.js"],"names":["Boolean","window","location","hostname","match","Scanner","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","detected","result","getCode","Quagga","stop","videoRef","React","createRef","init","inputStream","type","constraints","width","height","facingMode","locator","patchSize","halfSample","numOfWorkers","decoder","readers","locate","err","console","log","start","onDetected","offDetected","react_default","a","createElement","id","className","Component","Result","code","ScannerContainer","handleClick","ev","isScanning","state","setState","codeResult","_this$state","react","onClick","components_Result","components_Scanner","ReactDOM","render","containers_ScannerContainer","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yJAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kHCmCSC,cAjDX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAqCVQ,SAAW,SAAAC,IAEPC,EADoBT,EAAKD,MAAjBU,SACAD,GACRE,IAAOC,QAvCPX,EAAKY,SAAWC,IAAMC,YAFPd,mFAMfU,IAAOK,KAAK,CACRC,YAAa,CACTC,KAAO,aACPC,YAAa,CACTC,MAAO,IACPC,OAAQ,IACRC,WAAY,gBAGpBC,QAAS,CACLC,UAAW,SACXC,YAAY,GAEhBC,aAAc,EACdC,QAAS,CACLC,QAAU,CAAC,eAEfC,QAAQ,GACT,SAASC,GACR,GAAIA,EACA,OAAOC,QAAQC,IAAIF,GAEvBnB,IAAOsB,UAEXtB,IAAOuB,WAAW9B,KAAKI,yDAIvBG,IAAOwB,YAAY/B,KAAKI,UACxBG,IAAOC,wCAUP,OAAOwB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,cAAcC,UAAU,oBA9CzBC,aCMPC,mLANF,IACGC,EAASvC,KAAKJ,MAAd2C,KACR,OAAOP,EAAAC,EAAAC,cAAA,WAAMK,UAHAF,aCsCNG,cAnCX,SAAAA,EAAY5C,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwC,IACf3C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0C,GAAArC,KAAAH,KAAMJ,KAOV6C,YAAc,SAAAC,GAAM,IACRC,EAAe9C,EAAK+C,MAApBD,WACR9C,EAAKgD,SAAS,CACVF,YAAaA,KAXF9C,EAenBS,QAAU,SAAAD,GACNsB,QAAQC,IAAIvB,EAAOyC,WAAWP,MAC9B1C,EAAKgD,SAAS,CACVN,KAAMlC,EAAOyC,WAAWP,KACxBI,YAAY,KAjBhB9C,EAAK+C,MAAQ,CACTD,YAAY,EACZJ,KAAM,MAJK1C,wEAuBV,IAAAkD,EACyB/C,KAAK4C,MAA1BD,EADJI,EACIJ,WAAYJ,EADhBQ,EACgBR,KACrB,OACIP,EAAAC,EAAAC,cAACc,EAAA,SAAD,KACIhB,EAAAC,EAAAC,cAAA,UAAQpB,KAAK,SAASmC,QAASjD,KAAKyC,aAAeE,EAAa,OAAS,QACvEJ,EAAOP,EAAAC,EAAAC,cAACgB,EAAD,CAAQX,KAAMA,IAAW,KAChCI,EAAaX,EAAAC,EAAAC,cAACiB,EAAD,CAAS7C,QAASN,KAAKM,UAAc,aA9BrC+B,mBCE/Be,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAAsBC,SAASC,eAAe,SJ2HxD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4ad2a8d8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\nimport Quagga from 'quagga';\r\n\r\nclass Scanner extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.videoRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        Quagga.init({\r\n            inputStream: {\r\n                type : \"LiveStream\",\r\n                constraints: {\r\n                    width: 640,\r\n                    height: 480,\r\n                    facingMode: \"environment\", // or user\r\n                }\r\n            },\r\n            locator: {\r\n                patchSize: \"medium\",\r\n                halfSample: true\r\n            },\r\n            numOfWorkers: 1,\r\n            decoder: {\r\n                readers : [\"ean_reader\"]\r\n            },\r\n            locate: true\r\n        }, function(err) {\r\n            if (err) {\r\n                return console.log(err);\r\n            }\r\n            Quagga.start();\r\n        });\r\n        Quagga.onDetected(this.detected);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        Quagga.offDetected(this.detected);\r\n        Quagga.stop();\r\n    }\r\n\r\n    detected = result => {\r\n        const { getCode } = this.props;\r\n        getCode(result);\r\n        Quagga.stop()\r\n    }\r\n\r\n    render() {\r\n        return <div id=\"interactive\" className=\"viewport\"/>\r\n    }\r\n}\r\n\r\nexport default Scanner;","import React, { Component } from 'react';\r\n\r\nclass Result extends Component {\r\n    render() {\r\n        const { code } = this.props;\r\n        return <div>{code}</div>\r\n    }\r\n}\r\n\r\nexport default Result;","import React, { Component, Fragment } from 'react';\r\nimport Scanner from '../components/Scanner';\r\nimport Result from '../components/Result';\r\n\r\nclass ScannerContainer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isScanning: false,\r\n            code: null,\r\n        };\r\n    }\r\n\r\n    handleClick = ev => {\r\n        const { isScanning } = this.state;\r\n        this.setState({\r\n            isScanning: !isScanning\r\n        })\r\n    }\r\n\r\n    getCode = result => {\r\n        console.log(result.codeResult.code)\r\n        this.setState({\r\n            code: result.codeResult.code,\r\n            isScanning: false,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const  { isScanning, code } = this.state;\r\n        return (\r\n            <Fragment>\r\n                <button type=\"button\" onClick={this.handleClick}>{ isScanning ? 'Stop' : 'Scan' }</button>\r\n                { code ? <Result code={code} /> : null }\r\n                { isScanning ? <Scanner getCode={this.getCode} /> : null }\r\n            </Fragment>    \r\n        )\r\n    }\r\n}\r\n\r\nexport default ScannerContainer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport ScannerContainer from './containers/ScannerContainer';\nimport './index.css';\n\nReactDOM.render(<ScannerContainer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}